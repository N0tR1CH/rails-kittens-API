continue
must_have_a_role
continue
user.roles
continue
user.roles.any?
user.roles.any
user.roles
continue
user.roles.any?
user.roles_any?
continue
user.roles.to_a
continue
user.roles.to_a
user.roles.any?
continue
user.roles.any?
user.roles.to_a
userr.roles.to_a
user.roles
continue
kitten.to_a
continue
Kitten.joins(house: [user: :companies])
continue
Kitten.joins(house: [user: :companies])
Kitten.joins(:house)
continue
user.houses
user
kitten
JSON.parse(kitten)
kitten.to_json
kitten
Kitten.kittens_in_user_house.to_a
Kitten.kittens_in_user_house
exit
rspec
exit
continue
HousePolicy::Scope.new(current_user, House).resolve.to_a
HousePolicy::Scope.new(current_user, House).resolve.to_
HousePolicy::Scope.new(current_user, House).resolve
continue
current_user.companies
user.companies
CompanyPolicy::Scope.new(current_user, Company).resolve
current_user.houses.to_a
current_user.houses
current_user
continue
user.houses
user.roles
uses.roles
user.role
continue
response.status
exit
response.status
response.body
response
user
response
continue
response.body
JSON.parse(response.body).users
JSON.parse(response.body).user
continue
JSON.parse(response.body)['id']
response.body['id']
exit
response.body
response
exit
JSON.parse(response.body)
user
company
response.body
response
continue
JSON.parse(response.body).count
response
continue
response.body
continue
JSON.parse(response.body)
continue
JSON.parse(response.body)
response.body
response
continue
company.users.reload.count
create_request
continue
@company.users
User.where(id: params[:user_ids])
continue
User.where(id: params[:user_ids])
params
@company.users
continue
company.users.reload.count
company.users.reload..count
company.users.count
exit
company.users.to_a
company.users
continue
JSON.parse(response.body)
response.status
continue
response.status
continue
response.status
continue
exit
house.reload.street
create_request
house.reload.street
response.status
response
continue
response.status.to eq(404)
response.status.eq(404)
response.status.eq(404)?
response.status
exit
response.status
JSON.parse(response.body)
continue
JSON.parse(response.body)
response.body
response
house
exit
house_id
exit
JSON.parse(response.body)["id"]
JSON.parse(response.body)
response.body
response
continue
JSON.parse(response.body)
continue
exit
response.body
response
exit
response.body
response
continue
response.body
response
continue
get :index
response.body
response
continue
response
continue
JSON.parse(response.body).count
JSON.parse(response.body)
continue
JSON.parse(response.body).count
JSON.parse(response.body)
response.body
JSON.parse
JSON
continue
JSON.parse(response.body)
response.body
response
houses.parse
JSON.parse
JSON
houses
skip
@company.errors
@companies.errors
@company.users << User.where(id: params[:user_ids])
continue
exit
@company
continue
@company
continue
records.to_a
continue
records.to_a
continue
records.to_a
continue
records.to_a
admin.roles
admin
continue
admin
continue
admin
continue
admin
continue
user
house.user
user.houses
user.house
house
continue
house.user
house
user.house
user.houses
continue
records.to_a
continue
records.to_a
continue
user.roles
records.to_a
records
continue
records
continue
records
continue
records.to_a
continue
scope.to_a
scope
newuser
continue
scope.to_a
scope
continue
scope
scop
scope.to_a
exit
scope.to_a.nil?
scope.to_a
scope
continue
account1_house
account1_report
Account2_report
Account1_report
Accoun1_report
scope.to_a
continue
scope
continue
Pundit.policy.scope!(user,House)
exit
Pundit.policy.scope!(user,House)
scope
